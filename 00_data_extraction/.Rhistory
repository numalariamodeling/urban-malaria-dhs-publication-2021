#compute number of household members per cluster
df_num <- dhs %>% map(~dplyr::select(., hv001, hv009)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_HH = sum(hv009))) %>%
plyr::ldply()
#compute number of children 6 - 59 per cluster
df_num <- pfpr_df %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
mean(df_num$num_child_6_59)
# create PR dataset by filtering for microscopy (denominator -hh selected for hemoglobin, child slept there last night and have result for test and urban area(hv025). PR is for children 6 - 59 months)
pfpr_df <- dhs %>% map(~filter(., hv042 == 1 & hv103 == 1 & hc1 %in% c(6:59) & hml32 %in% c(1))) #& hml16 <59 & hml32 %in% c(0, 1,6)
mean(df_num$num_child_6_59)
#compute number of children 6 - 59 per cluster
df_num <- pfpr_df %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
mean(df_num$num_child_6_59)
sd(df_num$num_child_6_59)
473/972
median(df_num$num_child_6_59)
IQR(df_num$num_child_6_59)
?IQR
IQR(df_num$num_child_6_59, type = 8)
# create PR dataset by filtering for microscopy (denominator -hh selected for hemoglobin, child slept there last night and have result for test and urban area(hv025). PR is for children 6 - 59 months)
pfpr_df <- dhs %>% map(~filter(., hv042 == 1 & hv103 == 1 & hc1 %in% c(6:59) & hml32 %in% c(0, 1,6))) #& hml16 <59 & hml32 %in% c(0, 1,6)
#compute number of children 6 - 59 per cluster
df_num <- pfpr_df %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
IQR(df_num$num_child_6_59, type = 8)
median(df_num$num_child_6_59)
# create PR dataset by filtering for microscopy (denominator -hh selected for hemoglobin, child slept there last night and have result for test and urban area(hv025). PR is for children 6 - 59 months)
pfpr_df <- dhs %>% map(~filter(., hv042 == 1 & hv103 == 1 & hc1 %in% c(6:59))) & hml16 <59 & hml32 %in% c(1)
pfpr_df <- dhs %>% map(~filter(., hv042 == 1 & hv103 == 1 & hc1 %in% c(6:59))) & hml32 %in% c(1)
pfpr_df <- dhs %>% map(~filter(., hv042 == 1 & hv103 == 1 & hc1 %in% c(6:59))) & hml32 %in% c(1)
pfpr_df <- dhs %>% map(~filter(., hv042 == 1 & hv103 == 1 & hc1 %in% c(6:59) & hml32 %in% c(1)))
#compute number of children 6 - 59 per cluster
df_num <- pfpr_df %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
#compute number of children 6 - 59 per cluster
df_num <- pfpr_df %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001', 'dhs_year')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
View(pfpr_df)
names(pfpr_df[[1]])
#compute number of children 6 - 59 per cluster
df_num <- list(pfpr_df[[1]]) %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
median(df_num$num_child_6_59)
#compute number of children 6 - 59 per cluster
df_num <- list(pfpr_df[[2]]) %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
median(df_num$num_child_6_59)
#compute number of children 6 - 59 per cluster
df_num <- list(pfpr_df[[3]]) %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
median(df_num$num_child_6_59)
#compute number of children 6 - 59 per cluster
df_num <- list(pfpr_df[[4]]) %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
median(df_num$num_child_6_59)
IQR(df_num$num_child_6_59)
#compute number of children 6 - 59 per cluster
df_num <- list(pfpr_df[[1]]) %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
median(df_num$num_child_6_59)
IQR(df_num$num_child_6_59)
#compute number of children 6 - 59 per cluster
df_num <- list(pfpr_df[[2]]) %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
median(df_num$num_child_6_59)
IQR(df_num$num_child_6_59)
#compute number of children 6 - 59 per cluster
df_num <- list(pfpr_df[[3]]) %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
median(df_num$num_child_6_59)
IQR(df_num$num_child_6_59)
#compute number of children 6 - 59 per cluster
df_num <- list(pfpr_df[[4]]) %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
median(df_num$num_child_6_59)
IQR(df_num$num_child_6_59)
#compute number of children 6 - 59 per cluster
df_num <- pfpr_df %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
median(df_num$num_child_6_59)
IQR(df_num$num_child_6_59)
#compute number of household members per cluster
df_num <- dhs %>% map(~dplyr::select(., hv001, hv009)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_HH = sum(hv009))) %>%
plyr::ldply()
#compute number of children 6 - 59 per cluster
df_num <- pfpr_df %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
median(df_num$num_child_6_59)
IQR(df_num$num_child_6_59)
View(df_num)
#compute number of children 6 - 59 per cluster
df_num1 <- pfpr_df %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
# create PR dataset by filtering for microscopy (denominator -hh selected for hemoglobin, child slept there last night and have result for test and urban area(hv025). PR is for children 6 - 59 months)
pfpr_df <- dhs %>% map(~filter(., hv042 == 1 & hv103 == 1 & hc1 %in% c(6:59) & hml32 %in% c(0, 1,6))) #& hml16 <59 & hml32 %in% c(0, 1,6)
FF <- pfpr_df[[1]]
View(FF)
FF$hml13
FF$hml32
#compute number of children 6 - 59 per cluster
df_num2 <- pfpr_df %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n())) %>%
plyr::ldply()
View(df_num1)
nn <- left_join(df_num2, df_num1, by = c(".id", "hv001"))
View(nn)
nn = nn %>% mutate(rate = num_child_6_59.x/num_child_6_59.y)
nn = nn %>% mutate(rate = num_child_6_59.y/num_child_6_59.x)
IQR(nn$rate)
IQR(nn$rate, na.rm =T)
nn = nn %>% mutate(rate = num_child_6_59.y/num_child_6_59.x, num_child_6_59.y = replace_na(num_child_6_59.y,0))
nn = nn %>% mutate(num_child_6_59.y = replace_na(num_child_6_59.y,0), rate = num_child_6_59.y/num_child_6_59.x)
IQR(nn$rate, na.rm =T)
IQR(nn$rate, na.rm =T, type = 8)
pfpr_df <- dhs %>% map(~filter(., hv042 == 1 & hv103 == 1 & hc1 %in% c(6:59) & hml32 %in% c(0, 1,6)))
df_num1 <- pfpr_df %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n()))  %>%
plyr::ldply()
pfpr_df <- dhs %>% map(~filter(., hv042 == 1 & hv103 == 1 & hc1 %in% c(6:59) & hml32 %in% c(1)))
df_num2 <- pfpr_df %>% map(~dplyr::select(., hv001, hc1)) %>%  map(~dplyr::group_by_(., 'hv001')) %>% map(~summarise(.,num_child_6_59 = n()))  %>%
plyr::ldply()
nn <- left_join(df_num2, df_num1, by = c(".id", "hv001"))
nn = nn %>% mutate(num_child_6_59.y = replace_na(num_child_6_59.y,0), rate = num_child_6_59.y/num_child_6_59.x)
IQR(nn$rate, na.rm =T, type = 8)
nn <- left_join(df_num1, df_num2, by = c(".id", "hv001"))
nn = nn %>% mutate(num_child_6_59.y = replace_na(num_child_6_59.y,0), rate = num_child_6_59.y/num_child_6_59.x)
IQR(nn$rate, na.rm =T, type = 8)
nn_list <- subset(nn, COLUMNNAME == ".id")
nn_list <- subset(nn, ".id")
nn_list <- split(nn, with(nn, interaction(.id)), drop = TRUE)
#2010
IQR(nn_list[[1]]$rate, na.rm =T, type = 8)
#2018
IQR(nn_list[[3]]$rate, na.rm =T, type = 8)
#2021
IQR(nn_list[[4]]$rate, na.rm =T, type = 8)
#all years
IQR(nn$rate, na.rm =T, type = 8)
nn_list <- split(nn, with(nn, interaction(.id)), drop = TRUE)
#2010
IQR(nn_list[[1]]$rate, na.rm =T, type = 8)
#2015
IQR(nn_list[[2]]$rate, na.rm =T, type = 8)
#2018
IQR(nn_list[[3]]$rate, na.rm =T, type = 8)
#2021
IQR(nn_list[[4]]$rate, na.rm =T, type = 8)
View(nn)
#2018
median(nn_list[[3]]$rate, na.rm =T)
#2010
median(nn_list[[1]]$rate, na.rm =T)
#2015
median(nn_list[[2]]$rate, na.rm =T)
#2018
median(nn_list[[3]]$rate, na.rm =T)
#2021
median(nn_list[[4]]$rate, na.rm =T)
user = Sys.getenv("USERNAME")
Drive <- file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir <- file.path(Drive,"OneDrive", "urban_malaria")
ExDir <- file.path(NuDir, "extracted_data")
ProjectDir = file.path(NuDir, 'data', 'nigeria','nigeria_dhs' , 'data_analysis')
DataDir = file.path(ProjectDir, "data")
DHSData = file.path(DataDir, 'DHS')
DataIn = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'DHS_survey_extract')
ResultDir =file.path(ProjectDir, "results", "research_plots")
HisDir =file.path(ResultDir, "histograms")
MapsDir = file.path(ResultDir, "maps")
GeoDir <- file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'geospatial_covariates')
CsvDir = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'cleaned_cluster_covariates_all', 'New_082321')
# ----------------------------------------------------
### Required functions and settings
## ----------------------------------------------------
library(ggridges)
source("./other_functions/descriptive_analysis_functions.R")
# # Reading in the necessary packages
list.of.packages <- c("tidyverse", "survey", "haven", "ggplot2", "purrr", "summarytools", "stringr", "sp", "raster",
"lubridate", "sf", "labelled","scales",  "raster", "rlist", 'ggpubr', #, 'rgeos'
'cowplot', 'gridExtra', 'lme4', 'ggsci', 'patchwork', 'ggcorrplot', 'pscl', 'visreg', 'viridis', 'splines', 'shades')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, library, character.only = TRUE) #applying the library function to packages
align_legend <- function(p, hjust = 0.5)
{
# extract legend
g <- cowplot::plot_to_gtable(p)
grobs <- g$grobs
legend_index <- which(sapply(grobs, function(x) x$name) == "guide-box")
legend <- grobs[[legend_index]]
# extract guides table
guides_index <- which(sapply(legend$grobs, function(x) x$name) == "layout")
# there can be multiple guides within one legend box
for (gi in guides_index) {
guides <- legend$grobs[[gi]]
# add extra column for spacing
# guides$width[5] is the extra spacing from the end of the legend text
# to the end of the legend title. If we instead distribute it by `hjust:(1-hjust)` on
# both sides, we get an aligned legend
spacing <- guides$width[5]
guides <- gtable::gtable_add_cols(guides, hjust*spacing, 1)
guides$widths[6] <- (1-hjust)*spacing
title_index <- guides$layout$name == "title"
guides$layout$l[title_index] <- 2
# reconstruct guides and write back
legend$grobs[[gi]] <- guides
}
# reconstruct legend and write back
g$grobs[[legend_index]] <- legend
g
}
theme_manuscript <- function(){
theme_bw() +
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.5),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, color = "black"),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size =12),
legend.title=element_text(size=12, colour = 'black'),
legend.text =element_text(size = 12, colour = 'black'),
legend.key.height = unit(1, "cm"))
}
theme_corr <- function(){
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.5),
axis.text.x = element_text(size = 12, color = "black"),
axis.text.y = element_text(size = 12, color = "black"))
}
igv.lm.point <- function(df, x, y, point_val, legend_title, xlab, ylab){
plot <- ggplot(df, aes(x=x, y=y)) +
geom_point(aes(fill=as.factor(point_val)), alpha=0.7, shape=21, size = 10) +
scale_fill_igv()+
stat_cor(method = "pearson", col='darkred') +
theme_manuscript()+
guides(fill=guide_legend(title=legend_title, override.aes = list(size =5)))+
xlab(xlab)+
ylab(ylab)
}
map_theme <- function(){
theme(axis.text.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
rect = ggplot2::element_blank(),
plot.background = ggplot2::element_rect(fill = "white", colour = NA),
legend.title.align=0.5,
legend.title=element_text(size=16, colour = 'black'),
legend.text =element_text(size = 16, colour = 'black'),
legend.key.height = unit(0.65, "cm"))
}
gmap_fun <- function(polygon_name, point_data, labels, fill, legend_title){
ggplot(polygon_name) +
geom_sf(color='lightgrey')+
geom_point(data = point_data,
aes(fill=fill,  geometry = geometry),
stat = "sf_coordinates", alpha = 0.45, size=3, shape=21
) +
viridis::scale_fill_viridis(option='C', discrete=TRUE, labels=labels, na.value ='grey', limits=c('[0,0.2]', '(0.2,0.4]', '(0.4,0.6]', '(0.6,0.8]', '(0.8,1]', NA)) +
map_theme() +
guides(fill = guide_legend(title=legend_title, override.aes = list(size = 5)))+
xlab("")+
ylab("")
}
#cluisters over time map plot function
gmap_fun2 <- function(polygon_name, point_data, labels, fill, legend_title){
ggplot(polygon_name) +
geom_sf(color='lightgrey')+
geom_point(data = point_data,
aes(fill=fill,  geometry = geometry),
stat = "sf_coordinates", alpha = 0.45, size=3, shape=21) +
scale_fill_manual(values = c("#5560AB",  "#FAAF43", "#EE3C96", "lightseagreen")) +
map_theme() +
guides(fill = guide_legend(title=legend_title, override.aes = list(size = 4)))+
xlab("")+
ylab("")
}
hist_fun <-function(df, x,fill, xlab, ylab,labels){
ggplot(df_all, aes(x =x, fill =fill))+
geom_histogram(alpha = 0.4, position="identity") +
scale_x_continuous(expand = c(0.03, 0)) +
scale_y_continuous(expand = c(0.03, 0)) +
labs(x = xlab, y =ylab)+
scale_fill_discrete(labels = labels)+
theme_manuscript()+
guides(fill=guide_legend(title=NULL))
}
gdensity_fun <- function(df, x, fill,legend_title, xlab, ylab){
ggplot(df, aes(x=x, fill=as.factor(fill))) +
geom_density(alpha = 0.7, stat = "density", trim = F) +
scale_x_continuous(expand = c(0.03, 0)) +
scale_y_continuous(expand = c(0.03, 0)) +
theme_bw() +
scale_fill_manual(values = c("#5560AB",  "#FAAF43", "#EE3C96", "lightseagreen")) +
theme_manuscript()+
guides(fill=guide_legend(title=legend_title))+
xlab(xlab)+
ylab(ylab)
}
hist_fun2 <-function(df, xmin, xmax){
p<- ggplot(df, aes_string(x=names(df)[var_list[[2]]])) +
geom_histogram(bins = 30, alpha = 0.7, position="identity", color = "violetred4", fill = colr_data[colr_list[[1]]])+
theme_manuscript()+
labs (title = labels_data[label_list[[2]]], x = "values") +
xlab(xlab_data[2]) +
ylab("Count")+
scale_y_continuous(expand = c(0.03, 0))+
scale_x_continuous(limits = c(xmin, xmax), expand = c(0.01, 0))
}
cdf_hist = function(df, fill,color, x, xlab, bins){
hist=ggplot(df, aes(x =.data[[x]]))+geom_histogram(alpha = 0.4, position="identity", bins=bins)
max_y=max(ggplot_build(hist)$data[[1]]$count)
ggplot(df, aes(.data[[x]]))+
geom_histogram(fill=fill, color= color, alpha = 0.4, position="identity", bins = bins) +
stat_ecdf(aes_(y =bquote(..y..* .(max_y)), color =color))+
scale_y_continuous(name= 'Count', sec.axis=sec_axis(trans = ~./max_y, name = 'Cumulative percent', labels = function(x) format(x *100, digits=2, nsmall=0)))+
theme_manuscript()+theme(legend.position = 'none')+
xlab(xlab)
}
forest_fun = function(data, color1, color2, xname, breaks, labels){
ggplot(data=data, aes(y=index, x= coefficient, xmin=lci, xmax=uci))+
geom_point(shape = 15, color=color1, size = 3)+
geom_errorbarh(height=.1, color =color2)+
scale_x_continuous(name=xname)+
scale_y_continuous(name = "", breaks=breaks, labels = labels, trans = 'reverse')+
geom_vline(xintercept=0, color='black', linetype="dashed", alpha=.5)+
theme_manuscript()
}
plots_fun <- function(df, y_var, color_point, color_smooth, fill_smooth, reg_fam, y_lab){
plots = df %>% {map2(., xlab, ~ggplot(.x,aes_string(x='values', y=y_var))+
geom_point(shape=42, size= 3, color = color_point, alpha = 0.5) +
geom_smooth(aes(fill = "Trend"), se = FALSE, color = color_smooth, method = 'glm', method.args = list(family = reg_fam(link = "log")), formula = y ~ ns(x, 3, knots = seq(min(x),max(x),length =4)[2:3]))+
geom_smooth(aes(color = "Confidence Interval"), fill = fill_smooth, linetype = 0, method = 'glm', method.args = list(family = reg_fam(link = "log")), formula = y ~ ns(x, 3, knots = seq(min(x),max(x), length =4)[2:3]))+
theme_manuscript()+
labs(x = .y, y = y_lab)+
guides(fill =FALSE, color =FALSE))}
}
plots_fun2 <- function(df, y_var, color_point, color_smooth, fill_smooth, reg_fam, y_lab){
plots = df %>% {map2(., xlab, ~ggplot(.x,aes_string(x='values', y=y_var))+
geom_point(shape=42, size= 3, color = color_point, alpha = 0.5) +
geom_smooth(aes(fill = "Trend"), se = FALSE, color = color_smooth, method = 'glm', method.args = list(family = reg_fam(link = "log")), formula = y ~ ns(x, 3))+
geom_smooth(aes(color = "Confidence Interval"), fill = fill_smooth, linetype = 0, method = 'glm', method.args = list(family = reg_fam(link = "log")), formula = y ~ ns(x, 3))+
theme_manuscript()+
labs(x = .y, y = y_lab)+
guides(fill =FALSE, color =FALSE))}
}
plots_fun3 <- function(df, y_var, color_point, color_smooth, fill_smooth, reg_fam, x_lab1, y_lab){
plots = df %>% {purrr::map2(., xlab, ~ggplot(.x,aes_string(x='values', y=y_var))+
geom_point(shape=42, size= 3, color = color_point, alpha = 0.5) +
geom_smooth(aes(fill = "Trend"), se = FALSE, color = color_smooth, method = 'glm', method.args = list(family = reg_fam(link = "log")), formula = y ~ ns(x, 3, knots = seq(min(x),max(x),length =4)[2:3]))+
geom_smooth(aes(color = "Confidence Interval"), fill = fill_smooth, linetype = 0, method = 'glm', method.args = list(family = reg_fam(link = "log")), formula = y ~ ns(x, 3, knots = seq(min(x),max(x),length =4)[2:3]))+
theme_manuscript()+
labs(x = x_lab1, y =y_lab)+
guides(fill =FALSE, color =FALSE))}
}
plots_para <- function(xlist, fill_list, color_list, bin_list){
x=list(xlist)
fill = list(fill_list)
color = list(color_list)
bins = list(bin_list)
}
state_map <- function(state, STATE_NAME, title){
df = dplyr::filter(state_sf, (NAME_1 %in% c(state)))
STATE <- STATE_NAME
map_name = dplyr::filter(map, (ADM1NAME %in% c(STATE)))
map_state = gmap_fun(df, map_name, labels=c('0 - 0.2', '0.3 - 0.4', '0.5 - 0.6', '0.7 - 0.8', '0.9 - 1.0', 'Missing data'),
map_name$positives_cut, title)
map_state = map_state + theme(legend.position = 'none', panel.border = element_rect(colour = "black", fill=NA, size=0.5))+ xlab(state)
}
#x <- c("tidyverse","INLA", "ggplot2", "ggpubr",  "rgdal", "sp", "sf", "tmap",
#'paletteer', 'cowplot', 'gridExtra', 'lme4', 'reshape2', "patchwork", "gdata",'cowplot', 'mmtable2', 'ggsci') #"inlabru","rebus"
#lapply(x, library, character.only = TRUE) #applying the library function to packages
## ----------------------------------------------------------------
### Read in computed DHS cluster data and generate related figures
## ----------------------------------------------------------------
#read in dhs file
dhs = read.csv(file.path(ExDir, "cleaned_datasets","all_DHS_variables_urban_malaria.csv"), header = T, sep = ',') %>% dplyr::select(-X)
dhs$positives_prop = round(dhs$positives/dhs$child_6_59_tested_malaria, 1) %>% as.numeric
summary(dhs$child_6_59_tested_malaria)
reg_month <- dhs %>%drop_na(positives) %>% group_by(dhs_year, region,first_interview_month) %>%
summarise(prop = sum(positives)/sum(child_6_59_tested_malaria), clusters = n())
#figure 1a
dhs = dhs %>%drop_na(positives)
df=data.frame(x=c('2010', '2015', '2018', "2021"), y =c(81, 136, 560, 195))
pdf('clusters_dhs.pdf')
barplot(height=df$y, names=df$x,
col=rgb(0.8,0.1,0.1,0.6),
xlab="Year",
ylab="Number of Clusters",
)
dev.off()
#figure 1b
p1 = igv.lm.point(dhs, dhs$num_child_6_59, dhs$child_6_59_tested_malaria,dhs$dhs_year,  "Survey year", 'Number of children 6 - 59 months', 'Number of children 6 - 59 months \n tested for malaria')
p1= p1 +geom_smooth(method=lm, color = "black")+ theme(legend.position = 'none')
#figure 1a
p1a <- ggplot(df, aes(x= x,  y = y), fill= dhs_year) +
geom_col(aes(fill = x))+
labs (x = "Year of survey", y = "Number of urban clusters", title = "") +
scale_fill_manual(values=c("#5560AB",  "#FAAF43", "#EE3C96", "#1390A1")) +
theme_manuscript()+
theme(legend.position = "none")
p1a
#figure 1b
dhs_1 <- dhs %>% mutate(dhs_year = as.character(dhs$dhs_year))
p1b <- ggplot(data = dhs_1, aes(x= dhs_year,  y = child_6_59_tested_malaria), fill= dhs_year) +
geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = dhs_year), width = 0.08)+
labs (x = "Year of survey", y = "Children 6 - 59 months tested for malaria per urban cluster", title = "") +
scale_color_manual(values=c("#5560AB",  "#FAAF43", "#EE3C96", "lightseagreen")) +
theme_manuscript()+
theme(legend.position = "none")
p1 <- p1a + p1b
p1
#values used in manuscript texts
table(dhs$dhs_year)
#values used in manuscript texts
table(dhs$dhs_year)
nrow(!is.na(subset(dhs, dhs_year ==2010 & num_child_6_59 >=20)))
nrow(!is.na(subset(dhs, dhs_year ==2015 & num_child_6_59 >=20)))
nrow(!is.na(subset(dhs, dhs_year ==2018 & num_child_6_59 >=20)))
nrow(!is.na(subset(dhs, dhs_year ==2021 & num_child_6_59 >=20)))
#figure 2a
df_tested = data.frame(values = dhs$child_6_59_tested_malaria, category = 'tested')
df_positives = data.frame(values = dhs$positives, category = 'positives')
df_all = rbind(df_tested, df_positives)
p2 = hist_fun(df_all, df_all$values, df_all$category, 'Number of children 6 - 59 months', 'Count', c("Positive tests", "Tested"))+
theme(legend.position = c(0.6, 0.7))+
theme(legend.background = element_rect(colour = 'black', fill = 'white', linetype='solid')) +
guides(fill=guide_legend(title= str_wrap("2010, 2015,2018, and 2021 DHS and MIS surveys", width = 25)))
p2
#figure 2b
#examine the number of children tested
p3 = igv.lm.point(dhs, dhs$child_6_59_tested_malaria, dhs$positives, dhs$dhs_year, 'Survey year', 'Number of children 6 - 59 months \n tested for malaria', 'Number of positive tests' )
p3_ = p3 + geom_abline(slope=1, intercept=c(0,0), size = 0.9) +geom_smooth(method=lm, color = "black")
p_2b=ggplot(data=dhs, mapping=aes(x= positives_prop, y= factor(dhs_year), fill =factor(dhs_year), height = ..density..)) +
geom_density_ridges(trim = TRUE) +
scale_fill_manual(values = c("#5560AB",  "#FAAF43", "#EE3C96", "lightseagreen")) +
theme_manuscript() +
theme(legend.position = "none") +
ylab("") +
xlab("Test positivity rate") + xlim(0,1)
p_2b
#figure 2c
#load spatial points
sf21 = st_read(file.path(DHSData, "Downloads", "NG_2021_MIS_12052022_1735_141460/NGGE81FL/NGGE81FL.shp"),)
sf18 = st_read(file.path(DHSData, "Downloads", "NG_2018_DHS_08142023_1348_141460/NGGE7BFL/NGGE7BFL.shp"),)
sf15 = st_read(file.path(DHSData, "Downloads", "NG_2015_MIS_06192019/NGGE71FL/NGGE71FL.shp"),)
sf10 = st_read(file.path(DHSData, "Downloads", "NG_2010_MIS_06192019/NGGE61FL/NGGE61FL.shp"),)
sf_all = rbind(sf21, sf18, sf15, sf10) %>%filter(URBAN_RURA == "U") %>%  dplyr::rename(v001 = DHSCLUST)
#data wrangling
dhs_ = dhs %>%  dplyr::select(v001, positives, child_6_59_tested_malaria, DHSYEAR=dhs_year, net_use, net_use_child.x, positives_prop,
first_interview_month)
map = sf_all %>% left_join(dhs_, by=c('v001', 'DHSYEAR'))  %>%  filter(LATNUM != 0) %>% mutate(ADM1NAME = toupper(ADM1NAME))
map$positives_cut = cut(map$positives_prop, breaks=c(0, 0.2, 0.4, 0.6, 0.8, 1), include.lowest = TRUE)
df_count = map %>% dplyr::select(positives_cut) %>%  group_by(positives_cut) %>%  summarize(`Count` = n())
map$net_cut = cut(map$net_use, breaks=c(0,10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100), include.lowest = TRUE)
stateshp = st_read(file.path(DataDir, "shapefiles","gadm36_NGA_shp", "gadm36_NGA_1.shp")) #, layer ="gadm36_NGA_1",use_iconv=TRUE, encoding= "UTF-8")
state_sf = st_as_sf(stateshp)
#big map
map_big = gmap_fun(state_sf, map, labels=c(paste0('0 - 0.2',  ' (', df_count$Count[[1]], ')'),
paste0('0.3 - 0.4',  ' (', df_count$Count[[2]], ')'), paste0('0.5 - 0.6',  ' (', df_count$Count[[3]], ')'),
paste0('0.7 - 0.8',  ' (', df_count$Count[[4]], ')'), paste0('0.9 - 1.0',  ' (', df_count$Count[[5]], ')'),
'Missing data'),
map$positives_cut, 'Test positivity rate (overall count)') #+ theme(legend.position = "none")
#borno
map_abia <- state_map('Abia', 'ABIA', 'Test positivity rate')
#Lagos
map_lag <- state_map('Lagos', 'LAGOS', 'Test positivity rate')
#Anambra
map_akwa <- state_map('Akwa Ibom', 'AKWA IBOM', 'Test positivity rate')
#rivers
map_riv <- state_map('Rivers', 'RIVERS', 'Test positivity rate') #+ theme(legend.position = "right")
patch1 = ( map_big|(map_lag /(map_abia + map_riv)))+ plot_layout(ncol = 2)
patch2 = (p2+ p_2b)/ patch1 + plot_layout(nrow = 2) #+  plot_annotation(tag_levels = 'A') & theme(plot.tag = element_text(face = 'bold', size = 16))
patch3 = ((map_lag /(map_abia + map_riv)))+ plot_layout(nrow = 2)
patch3
map_low_values = map %>% na.omit(positives) %>%  filter(positives_prop == 0) %>%  group_by(ADM1NAME) %>%  summarise(n())
map_low = map_low_values %>%  filter(`n()` >15)
cluster = map %>% na.omit(positives)
#figure 3
#trends by DHS year
trend_data= dhs
trend_data$month_year = paste0(trend_data$first_interview_month, "_", trend_data$dhs_year)
table(trend_data$month_year)
trend_data_10 = trend_data[trend_data$first_interview_month ==10,]
p_all_10 = gdensity_fun(trend_data_10, trend_data_10$positives_prop, trend_data_10$dhs_year, "Survey year",
'Test positivity rate for clusters sampled in October', 'Density') + xlim(0,1)
check = trend_data_10 %>%  filter(dhs_year == '2021')
summary(check$positives_prop)
#figure 3
#trends by DHS year
trend_data= dhs
trend_data$month_year = paste0(trend_data$first_interview_month, "_", trend_data$dhs_year)
table(trend_data$month_year)
trend_data_10 = trend_data[trend_data$first_interview_month ==10,]
p_all_10 = gdensity_fun(trend_data_10, trend_data_10$positives_prop, trend_data_10$dhs_year, "Survey year",
'Test positivity rate for clusters sampled in October', 'Density') + xlim(0,1)
check = trend_data_10 %>%  filter(dhs_year == '2021')
summary(check$positives_prop)
trend_data_11 = trend_data[trend_data$first_interview_month ==11,]
p_all_11 = gdensity_fun(trend_data_11, trend_data_11$positives_prop, trend_data_11$dhs_year, "Survey year",
'Test positivity rate for clusters sampled in November', 'Density') + xlim(0,1)
trend_data_12 = trend_data[trend_data$first_interview_month ==12,]
p_all_12 = gdensity_fun(trend_data_12, trend_data_12$positives_prop, trend_data_12$dhs_year, "Survey year",
'Test positivity rate for clusters sampled in December', 'Density') + xlim(0,1)
all_plots = p_all_10 / p_all_11 / p_all_12 +  plot_annotation(tag_levels = 'A') & theme(plot.tag = element_text(face = 'bold', size = 16))
all_plots
View(trend_data)
88+287+365
dd <- trend_data %>% filter(positives == 0)
table(dd$dhs_year)
table(dd$dhs_year, dd$first_interview_month)
740-88
ddd <- trend_data %>% group_by(first_interview_month) %>% summarise(summ = sum(child_6_59_tested_malaria))
ddd
